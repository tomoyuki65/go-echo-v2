// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/healthcheck/healthcheck.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repositories/healthcheck/healthcheck.go -destination=./internal/repositories/healthcheck/mock_healthcheck/mock_healthcheck.go
//

// Package mock_healthcheck is a generated GoMock package.
package mock_healthcheck

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHealthcheckRepository is a mock of HealthcheckRepository interface.
type MockHealthcheckRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHealthcheckRepositoryMockRecorder
	isgomock struct{}
}

// MockHealthcheckRepositoryMockRecorder is the mock recorder for MockHealthcheckRepository.
type MockHealthcheckRepositoryMockRecorder struct {
	mock *MockHealthcheckRepository
}

// NewMockHealthcheckRepository creates a new mock instance.
func NewMockHealthcheckRepository(ctrl *gomock.Controller) *MockHealthcheckRepository {
	mock := &MockHealthcheckRepository{ctrl: ctrl}
	mock.recorder = &MockHealthcheckRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthcheckRepository) EXPECT() *MockHealthcheckRepositoryMockRecorder {
	return m.recorder
}

// Healthcheck mocks base method.
func (m *MockHealthcheckRepository) Healthcheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthcheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Healthcheck indicates an expected call of Healthcheck.
func (mr *MockHealthcheckRepositoryMockRecorder) Healthcheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthcheck", reflect.TypeOf((*MockHealthcheckRepository)(nil).Healthcheck), ctx)
}
